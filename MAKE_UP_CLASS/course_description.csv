,CS_Course,Desc
0,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/110.html,"<p>Introduction to programming practice using Python. Analysis and formulation of problems for computer solution. Systematic design, construction, and testing of programs. Substantial programming assignments in Python. See professor's website for an updated syllabus.</p>"
1,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/111.html,"<p>This is an introductory course on the fundamentals of computer programming. I see this class as an opportunity for you, the student, to see what computer programming is all about and (more importantly) to see whether you want to spend the next few years doing more of it. This course will include weekly programming projects, readings, a midterm, and final examinations. Class participation is not optional.</p>"
2,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/150.html,"<p>Intended for students who have completed COMP_SCI 111, but don’t have any other formal Computer Science background. It will provide an introduction to object-oriented programming in Python, preparing students for future courses such as COMP_SCI 211. </p>"
3,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/203.html,"<p>Overview of computer engineering design. Number systems and Boolean algebra. Logic gates. Design of combinational circuits and simplification. Decoders, multiplexors, adders. Sequential logic and flip flops. Introduction to assembly language.  </p>"
4,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/205.html,<p><strong>CATALOG DESCRIPTION: </strong>Basics of assembly language programming and instruction set architectures. System stack and procedure calls. Techniques for writing assembly language programs. The course covers ARM32 instruction set and basic I/O. Interfaces between high-level languages and assembly codes will be discussed.</p>
5,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/211.html,"<p><strong>CATALOG DESCRIPTION: </strong> CS 211 teaches foundational software design skills at a small-to-medium scale. We aim to provide a bridge from the student-oriented <em>How to Design Programs</em> languages to real, industry-standard languages and tools. In the first half of the course, you’ll learn the basics of imperative programming and manual memory management using the C programming language. In the second half of the course, we’ll transition to C++, which provides abstraction mechanisms such as classes and templates that we use to express our design ideas. Topics include expressions, statements, types, functions, branches and iteration, user-defined types, data hiding, basic UNIX shell usage, and testing.</p>"
6,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/212.html,"<p>This course will discuss fundamental concepts and tools in discrete mathematics with emphasis on their applications to computer science. Example topics include logic and Boolean circuits; sets, functions, relations, databases, and finite automata; deterministic algorithms and randomized algorithms; analysis techniques based on counting methods and recurrence equations; trees and more general graphs.</p>"
7,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/213-20.html,<p>This course has four purposes: (1) to learn about the hierarchy of abstractions and implementations that comprise a modern computer system; (2) to demystify the machine and the tools that we use to program it; (3) to come up to speed on systems programming in C in the Unix environment; (4) to prepare students for upper-level systems courses.</p>
8,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/214.html,"<p>The design, implementation, and analysis of abstract data types, data structures and their algorithms. Topics include: data and procedural abstraction, amortized data structures, trees and search trees, hash tables, priority queues, graphs, shortest paths, searching, and sorting. Required for computer science majors.</p>"
9,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/217.html,"<p>This course will teach students how to organize and analyze real-world data sets using tools that are most commonly used in the business world. In particular, students will learn the SQL language for analyzing data in relational databases. Students will also learn the details of common data encodings (integer, floating point, fixed point, text, date and time), how such data are structured in data files, and how to model complex data sets as a series of SQL tables. In other words, students will learn how to organize large data sets, and to answer questions using that data. The SQL skills taught in COMP_SCI 217 are essential for “data science” practitioners, especially when working with business data. COMP_SCI 217 is all about data, but not really about statistics, visualization, or programming (except SQL, which will be taught). Homework assignments will use the SQ database management systems. Some homework needs basic python programming as well.<br/>COMP_SCI 217 is different from the COMP_SCI 339 and ELEC_ENG/COMP_ENG 495 “Introduction to Databases” courses that we offer to computer science students in that COMP_SCI 217 does not teach the details of how database management systems are built. In other words, the students in this class will learn how to use a database system, not how to build it from scratch.Formerly COMP_SCI 317.</p>"
10,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/260-460.html,"<p>Course summary: This course explores the legal implications of the contemporary technology landscape, including the growth of artificial intelligence, the ecosystem for creating and disseminating digital information, and the challenges of ensuring digital privacy and algorithm equity. The course aims to help students develop a broad, contextualized view of the legal and policy opportunities and challenges associated with rapid technological change. A key goal of the course is for students to acquire the skills to understand, contribute to, and shape the dialog on complex issues at the intersection of technology and law.<br/><br/>Assignments and grading: Students are expected to 1) prepare for, attend, and participate in class, 2) participate in one short team-based debate, 3) participate in one short team-based presentation, 4) write one technology paper approximately 1200 words in length, and 5) complete additional assignments such as readings.</p>"
11,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/296-1.html,<p><strong><em>Under Construction - Coming Soon</em></strong></p>
12,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/298-1.html,"<p>To be announced,</p>"
13,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/301.html,"<p>A laboratory-based introduction to robotics. Focus will be on both hardware (sensors and actuators) and software (sensor processing and behavior development). Topics will include: the basics in kinematics, dynamics, control, and motion planning; and an introduction to Artificial Intelligence (AI) and Machine Learning (ML). </p>"
14,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/303.html,<p>COMP_ENG 303: Advanced Digital Design</p>
15,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/307.html,"<p>This course covers the basic knowledge in understanding and using cryptography. The main focus is on definitions, theoretical foundations, and rigorous proofs of security, with some programming practice. Topics include symmetric and public-key encryption, message integrity, hash functions, block-cipher design and analysis, number theory, and digital signatures.</p>"
16,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/310.html,"<p>We'll study the architecture of high-scale Internet services, using well-known case studies like Google Search, Netflix, and Uber.  System at these scales have many custom-built components, but they also contain many common building blocks that can be reused in other systems.  Students will apply lessons learned from case studies to build software systems in the cloud capable of scaling to millions of users, and they will do so with surprisingly little code.</p>"
17,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/311.html,"<p>Excitement for the Maker Movement continues to grow. Part of this growth stems from the idea that Making provides a means for democratization of fabrication and invention. While this is true, in part, the practices and people that are typically included under this brand are limited. In particular, issues of diversity, equity and inclusivity are seldom at the forefront of the design and implementation of Makerspaces, the tools used or the artifacts created. Hence, the purpose of this course is to bring issues of diversity, equity and inclusivity to the forefront. In particular, the course will push students to 1) critically explore Making as a practice that promotes democratization, 2) develop interfaces that allow a broader population of students to participate in digital fabrication and 3) co-design artifacts that positively impact accessibility and inclusivity. The course will include guest speakers, laboratory portions and a final project that encourages students to develop publishable scholarship and/or functional prototypes, as they work in interdisciplinary teams.</p>"
18,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/312-412.html,"<p>Data breaches, privacy breaches, and concerns about algorithmic decision-making have been on the rise. As a result, data privacy has become an increasingly significant concern in the past several years. Individuals and organizations often trust institutions with their data with the expectation that one's data is private from others or to the handling institutions and that it is not used for unfair practices. To ensure the privacy of sensitive data, privacy mechanisms have been developed to preserve the privacy of data without reducing its functionality.</p>"
19,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/313-413.html,"<p>Emerging interactive technologies are rapidly transforming the ways in which we work, play, communicate, and learn. Research on tangible interaction attempts to blur the line between digital technologies and the broader physical, social, and cultural worlds within which computer use is situated. This course will explore the use of tangible interaction to create innovative learning experiences and will review both theoretical and technological foundations of the field. Topics may include distributed cognition, embodied interaction, cultural forms, and tangible interaction frameworks.</p>"
20,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/314.html,"<p>We are surrounded by technologies that support our everyday social interactions. Facebook and Twitter provide persistent services for exchanging personal information, ubiquitous computing environments permit the integration of computational artifacts into the everyday world, and new technologies enable people to collaborate on projects when they are thousands of miles apart. The design of such systems, however, is not simply a technical question. In order to successfully create these systems, we need to understand how people work, play, and communicate with one another in a wide variety of situations. This course illustrates the practice of understanding human interactions that take place both with and through technology; and it explores the design, creation and evaluation of technologies to support such interactions. Course topics include: design processes, prototype construction and evaluation techniques. Specialized topics cover social computing technologies, social software and collaborative systems, and entertainment technologies. No programming experience is necessary. There will be occasional labs to explain technical content.</p>"
21,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/315-415.html,"<p>Design, Technology, and Research (DTR) is an CS and Segal learning initiative that empowers students to drive cutting-edge research through the development of systems that shape new experiences with people and technology. Students participate in DTR through fast-paced, quarter-long programs (intended to be repeated). Students work with a mentor to identify a direction of research, explore and iterate over designs, prototype at varying fidelities, build working systems, conduct evaluative studies, and report findings through conference publications. As a cohort, each week students demo their prototypes, provide and receive feedback, and help each other resolve technical challenges. DTR adapts and extends agile development and design-based research practices with scrums, sprints, studio critique, design logs, and pair research. <strong><a href=""http://dtr.northwestern.edu/"" rel=""noopener noreferrer"" target=""_blank"">View course website</a></strong></p>"
22,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/321.html,<p>This course introduces students to the key features of programming languages. Students implement a series of interpreters that nail down the precise details of how various aspects of programming languages behave.  Students are assumed to understand trees and (mathematical) functions that process them; the course builds up to the features of real programming languages from there.</p>
23,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/322.html,"<p>The compiler is the programmer's primary tool. Understanding the compiler is therefore critical for programmers, even if they never build one. Furthermore, many design techniques that emerged in the context of compilers are useful for a range of other application areas. This course introduces students to the essential elements of building a compiler: parsing, context-sensitive property checking, code linearization, register allocation, etc. To take this course, students are expected to already understand how programming languages behave, to a fairly detailed degree. The material in the course builds on that knowledge via a series of semantics preserving transformations that start with a fairly high-level programming language and culminate in machine code.</p>"
24,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/323.html,"<p>Fast, highly sophisticated code analysis and code transformation tools are essential for modern software development. Before releasing its mobile apps, Facebook submits them to a tool called Infer that finds bugs by static analysis, i.e., without even having to run the code, and guides developers in fixing them. Google Chrome and Mozilla Firefox analyze and optimize JavaScript code to make browsers acceptably responsive. Performance-critical systems and application software would be impossible to build and evolve without compilers that derive highly optimized machine code from high-level source code that humans can understand and reason about efficiently. Understanding what modern code analysis and transformation techniques can and can't do is a prerequisite for research on both software engineering and computer architecture, since hardware relies on software to realize its potential. In this class, you will learn the fundamentals of code analysis and transformation, and you will apply them by extending LLVM, a compiler framework now in production use by Apple, Adobe, Intel and other industrial and academic enterprises.  <a href=""https://users.cs.northwestern.edu/~simonec/CAT.html"">CS 323 Syllabus</a>.</p>"
25,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/325.html,"<p>Introduction to Lisp and programming knowledge-based systems and interfaces. Strong emphasis on writing maintainable, extensible systems. Topics include: semantic networks, frames, pattern matching, deductive inference rules, case-based reasoning, discrimination trees. Project-driven. Substantial programming assignments.</p>"
26,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/326.html,"<p>This course aims to cover various tools in the process of data science for obtaining, cleaning, visualizing, modeling, and interpreting data. Most of the tools introduced in this course will be based on Python, although the idea can be applied to similar tools in other programming languages. The goal of this course is not about the foundation of relevant technologies but rather when and how to use them in the pipeline of data science. The student will finish a quarter-long self-defined course project to exercise the data-science tools covered in the lecture. As the outcome of this course, the students should be able to independently work on real-life datasets with large scales and gain insights from them.</p>"
27,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/327.html,"<p>Generative Methods are algorithms which can be used to create. We can use grammars to make humorously chatty Twitterbots, Voronoi diagrams to create virtual cities and landscapes, and machine-learned models to generate realistic oil portraits from selfies.</p>"
28,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/329.html,"<p>Human-Computer Interaction (HCI) serves as the bridge between computing and humanity. The effective design of HCI systems requires a keen understanding of how interfaces and computer systems usefully support human endeavors (or not). Why would a particular set of characteristics of a system lead to reaching a desired outcome, while others encounter an obstacle? How might a good argument for a design be instantiated with effective interface and system models? Taking a step back, are our solutions actually addressing the underlying problem that humans face? What is actually the problem?<br/> <br/> Through the studio method, we will, as a learning community, learn to ask and answer these questions for ourselves. One focus will be on developing our critical thinking and problem solving skills through team projects and studio critique, with special emphasis on learning more effective structures and representations for thinking about the design of HCI systems. Another focus will be on learning to soften into a deeper understanding of problems that people encounter than we might at first assume - that is, developing our capacities for humility, empathy, and curiosity. Last but not least, we focus on *doing* — agile sprints, rapid prototyping and testing, iterating — learning to face and embrace fears, imperfections, failures that may otherwise hold us back from moving forward. Through this we will learn to become more skillful in how we work on difficult problems.<br/> <br/> REQUIREMENTS FOR ENROLLING, PLEASE READ CAREFULLY:<br/> While the course has no formal pre-requisites, learning via a studio method demands that students are open to constructive feedback and critique from the instructor, TAs, and/or peers. It also demands a willingness to learn together, as a community.<br/> <br/> Given the course’s ambitious learning objectives—both in the subject area and more generally in how we approach difficult problems—students taking the course should have a strong willingness in learning and growing personally. The course will demand a significant amount of self-direction: students need to be able and willing to learn on their own and in groups through their own volition, and in doing so, still thoughtfully approach challenges new, unfamiliar, and (potentially) uncomfortable ways. In other words, the course is meant for students who are serious about learning how to design computing systems for human use, *and* of ways to work with themselves and teammates through challenges.</p>"
29,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/330-1.html,"<p>Introduction to human-computer interaction and the design of systems that work for people and their organizations. The goal is to understand the manner in which humans interact with, and use, their computers for productive work. The course focus is on the interface as designed artifact. The interface is a design problem without a single ""correct"" solution but which has many ""good"" solutions and a plethora of ""bad"" solutions. Class discussion centers on what makes an interface good and proven techniques for designing interfaces that meet human needs. </p>"
30,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/332.html,"<p>Online markets are causing significant changes to society.  Examples include eBay, airBnB, tinder, Uber, stackexchange, and Amazon.  This class gives an introduction to the science of online markets combining topics from game theory and economics with topics from machine learning and algorithms.  The two main topics of interest are how individuals in these market places optimize their strategies and how the market designer optimizes the rules of the market place so that, when individuals optimize their strategies, desired market outcomes are achieved.  Student work will be a mix of problem sets and short projects.</p>"
31,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/333.html,"<p>When well designed, visual displays of data capitalize on human facilities for processing information and improve comprehension, memory, inference, and decision making. Creating visualizations is getting easier thanks to a proliferation of digital tools for transforming and visualizing data. Yet the best visualizations are still often creating by skilled human designers who have considerable experience with design analysis.</p>"
32,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/335.html,"<p>This course gives an introduction to the mathematical foundations of computation. The course will look at Turing machines, universal computation, the Church-Turing thesis, the halting problem and general undecidability, Rice’s theorem, the recursion theorem, efficient computation models, time and space (memory) bounds, deterministic and nondeterministic computation and their relationships, the P versus NP problem and hard problems for NP and beyond.</p>"
33,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/336.html,"<p>Algorithm design and analysis is fundamental to all areas of computer science and gives a rigorous framework for the study optimization. This course provides an introduction to algorithm design through a survey of the common algorithm design paradigms of greedy optimization, divide and conquer, dynamic programming, network flows, reductions, and randomized algorithms. Important themes that will be developed in the course include the algorithmic abstraction-design-analysis process and computational tractability (e.g., NP-completeness).</p>"
34,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/337.html,"<p>A semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.</p>"
35,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/338-1.html,"<p>A practical excursion into the building of Intelligent Information Systems. Each student will develop a working program in the area of information access, management, capture, or retrieval. Project definition, data collection, technology selection, implementation, and project management. Semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.<em><br/> </em></p>"
36,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/338-2.html,"<p>A practical excursion into the building of Intelligent Information Systems. Each student will develop a working program in the area of information access, management, capture, or retrieval. Project definition, data collection, technology selection, implementation, and project management. Semantics-oriented introduction to natural language processing, broadly construed. Representation of meaning and knowledge inference in story understanding, script/frame theory, plans and plan recognition, counter-planning, and thematic structures.<em><br/> </em></p>"
37,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/339.html,"<p>Data models and database design. Modeling the real world: structures, constraints, and operations. The entity relationship to data modeling (including network hierarchical and object-oriented), emphasis on the relational model. Use of existing database systems for the implementation of information systems.<em><br/> </em></p>"
38,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/340.html,"<p>A top-down exploration of networking using the 5-layer model and the TCP/IP stack. HTTP, FTP, DNS, BSD Sockets, concurrent servers, checksums, reliable transport with stop-and-wait, go-back-n, selective repeat, flow control, congestion control, TCP, unicast routing, multicast routing, router architecture, IP, IPv6, IP multicast, MAC protocols and LANs, Ethernet , wireless networks, and network security. Over the course of the quarter, students build web clients and servers, a fully compatible TCP/IP stack that can run them, and evaluate routing protocols in simulation.<em><br/> </em></p>"
39,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/343.html,"<p>A fundamental overview of operating systems (OSes) with an emphasis on practice.   Topics covered include: OS structure, OS models, OS abstractions, concurrency sources, concurrency challenges, concurrency control, scheduling and resource management, virtual memory, device drivers, protection and security, memory management, file systems, and design principles. Requires substantial low-level programming projects at both user-level and within a kernel. </p>"
40,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/344.html,"<p>Principles and practice of organizing and building AI reasoning systems. Topics include pattern-directed rule systems, truth-maintenance systems, and constraint languages.</p>"
41,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/345.html,<p><strong>This course is not currently offered.</strong></p>
42,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/346.html,"<p>Structure and timing of typical microprocessors. Sample microprocessor families. Memories, UARTS, timer/counters, serial devices, and related devices. MUX and related control structures for building systems. Standard bus structures. Interrupt programming. Hardware/software design tradeoffs.</p>"
43,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/347-447.html,<p><strong>This course is not currently offered.</strong></p>
44,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/348.html,"<p>Core techniques and applications of artificial intelligence. Representation retrieving and application of knowledge for problem solving, planning, probabilistic inference, and natural language understanding.<span></span></p>"
45,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/349.html,<p>Description</p>
46,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/350.html,"<p>The past decade has seen an explosion in the concern for the security of information. This course introduces students to the basic principles and practices of computer and information security. Focus will be on the software, operating system and network security techniques with detailed analysis of real-world examples. Topics include cryptography, authentication, software and operating system security (e.g., buffer overflow), Internet vulnerability (DoS attacks, viruses/worms, etc.), intrusion detection systems, firewalls, VPN, Web and wireless security. Students with good performance in the class will be awarded researchship in the academic year and/or the summer. This course can help satisfy the project course requirement for undergraduates and satisfy the breadth requirement in computer systems for system Ph.D. students. </p>"
47,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/351-1.html,"<p>First in a 3-course series to teach the core principles, ideas &amp; math behind all forms of computer-assisted picture-making; complementary/compatible with computer-game design interests. After this course you can write your own programs to depict animated 2D and 3D objects that respond to mouse and keyboard inputs, yet run in any modern web browser. We write WebGL programs in Javascript to create GPU-driven high-performance 3D graphics in any up-to-date web browser (Skeptical? try try <strong><a href=""http://www.chromeexperiments.com/webgl/"">http://www.chromeexperiments.com/webgl/</a></strong> )</p>"
48,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/351-2.html,"<p>Second in a 3-course series on the methods and theory of computer graphics, this project-oriented course explores how to describe shapes, movement, and lighting effects beyond the built-in abilities of WebGL. It includes interactive particle systems, simple rigid-body dynamics, explicit and implicit dynamics solvers (suitable for smoke, simple fluids and cloth) and an introduction to ray tracing (chrome, glass, and diffraction) with a few basic ideas for global illumination.</p>"
49,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/354.html,"<p>This course will focus on remote computer penetration (hacking). The class will introduce basic theory for many different types of attacks; then we will actually carry them out in 'real-world' settings. The goal is to learn security by learning how to view your machine from a hacker's perspective. In addition, we encourage students to participate in the UCSB International Capture the Flag Competition. Capture the Flag is a network security exercise where the goal is to exploit other machines while defending your own. In fact, this course should prepare you for any one of many capture the flag competitions that take place year round.</p>"
50,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/355.html,"<p><strong>OVERVIEW:</strong> This course will focus on Digital Forensics and Incident Response (Investigations). This class will introduce the basic theory of Digital Forensics and in the lab, we will actually apply the knowledge in practical scenarios. The goal is to learn how to investigate the digital artifacts left on hard drives, logs and other networking devices. The course shall prepare you to conduct data preservation and analysis on Windows, Linux and Macintosh platforms. Students will also get exposure to the Techniques, Tactics and Procedures (TTPs) of the prominent Threat Actors and will learn to conduct digital investigations with a sound process.</p>"
51,https://www.mccormick.northwestern.edu/computer-science/academics/courses/https://www.mccormick.northwestern.edu/electrical-computer/academics/courses/descriptions/361.html,"<p>We're sorry. The page you were looking for cannot be found. The page may have been removed or renamed, or may temporarily be unavailable.</p>"
52,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/362.html,"<p>Quarter long team project that entails designing a processor for a complete Instruction Set. Involves ISA design, design of components, datapath and control for a pipelined processor to implement the ISA. The design is performed using industry strength design tools and VHDL is used as the design specification language. The design is evaluated using benchmark programs for correctness and performance.</p>"
53,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/365-465.html,<p><strong>RECOMMENDED TEXT:</strong> TBD<br/> <br/><strong>TEACHING ASSISTANT:</strong> TBD</p>
54,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/368-468.html,"<p>This course focuses on developing and optimizing applications software on massively parallel graphics processing units (GPUs). Such processing units routinely come with hundreds to thousands of cores per chip and sell for a few hundred to a few thousand dollars. The massive parallelism they offer allows applications to run 2x-450x faster than on conventional multicores. However, to reach this performance improvement, the application must fully utilize the computational, storage and communication resources provided by the device. This course discusses state-of-the-art parallel programming optimization methods to achieve this goal.</p>"
55,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/371.html,"<p>Principles and practices of knowledge representation, including logics, ontologies, common sense knowledge, and semantic web technologies.</p>"
56,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/372-472.html,"<p>This course focuses on the exploration, construction and analysis of multi-agent models. Sample models from a variety of content domains are explored and analyzed. Spatial and network topologies are introduced. The prominent agent-based frameworks are covered as well as methodology for replicating, verifying and validating agent-based models. We use state of the art ABM and complexity science tools. This course can help satisfy the project course and artificial intelligence area course requirement for CS and CIS majors, and satisfy the breadth requirement in artificial intelligence for Ph.D. students in CS. It also satisfies a design course requirement for Learning Sciences graduate students, counts towards the Cognitive Science specialization and as an advanced elective for the Cognitive Science major.</p>"
57,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/376.html,"<p>Fundamental concepts of software for computer games and other simulation-based media.  Topics will include game design (selecting rules, resources, and player objectives), 2D and 3D game programming, representation of space, physics and collision detection, 3D animation engines, and performance engineering issues for real-time rendering. </p>"
58,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/377.html,"<p>In this course, students will design and develop games using the Unity game engine, with focus on team-based projects and agile development practices. Lectures will cover game design theory, game architecture and implementation, and the business of game development. Students will participate in class discussion and evaluation of projects in progress, to develop their skills in iterative design and implementation.</p>"
59,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/392.html,<p>The goal of this course is to provide an opportunity to learn the technical and critical reasoning skills need to rapidly and iteratively develop innovative full-stack mobile / web software applications.</p>
60,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/394.html,"<p><strong>See the course page on how to apply for this course: </strong><a href=""http://www.cs.northwestern.edu/academics/courses/394/"" rel=""noopener"" target=""_blank"">http://www.cs.northwestern.edu/academics/courses/394/</a></p>"
61,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-1.html,"<p>Even though there is no prerequisite for this course, completion of one or more courses in the following categories would be helpful:</p>"
62,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-2.html,"<p>This course introduces students to the growing field of Artificial Life: the study of “life as it could be” rather than as it happened to unfold on Earth. We will address fundamental questions about what distinguishes life from matter; the conditions in which complex adaptive systems may arise and how they may be shaped to suit our needs; as well as whether or not there can even be a science of the artificial. Answers to these questions are of interest as a basic intellectual pursuit, but they may also lead to useful computational, mechanical, chemical and biological technologies. <a href=""https://docs.google.com/document/d/1jURIbvpQ0imcaMk-AHUmj_szZNtsA4lZAlcqXa6usXs/edit"">Syllabus</a></p>"
63,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-5.html,"<p>The collection and usage of today’s data have posed unprecedented privacy concerns. What exactly are these concerns? Should we make the data private, or should we make private the algorithms that process data?<br/><br/>In this course, we will start with several historical back-and-forths between defenses and attacks of data privacy, which eventually led to the rigorous approach that is popular today -- differential privacy. We will then move on to the measurement of privacy and useful algorithmic tools that accomplish data analysis and machine learning tasks privately. Alongside this, we will learn about some beautiful mathematical tools useful in both private and non-private learning and statistics (some in a surprising manner).<br/><br/>The course is designed to serve at least two purposes:<br/>1. If you're interested in the modern approach to data privacy (in general or specifically differential privacy), this course is definitely for you.<br/>2. If you want to get ready for the study of ""the science"" of machine learning, this course can be your entry point for the mathematical tools.<br/><br/>(Up to changes) Grades will be determined by <br/>- participation/quizzes<br/>- assignments (mathematical proofs and python notebooks)<br/>- a potential 30-min midterm<br/>- final project (summary of research paper/tech report, or experiments)</p>"
64,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-9.html,"<p>An intense studio course on building social experiences in AR and VR.  This course draws on theory from architecture, sociology, theater, and more to explain how we are social in real life, and how to use those principles to design better social experiences in the digital realm.  We will be going on weekly ""field trips"" to VR/AR spaces, and building and testing experiences (some physical, mostly digital) on a weekly basis.  We will be developing phone-based VR on the WebXR open standard, as well as the many JS libraries for positional data, networking, and social connections necessary for modern social experiences. You won't need a VR headset, but will need a WebVR capable recent-ish smartphone, and a cheap Google Cardboard (we may just buy them in bulk).</p>"
65,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-10.html,"<p>We know that correlation does not imply causation, but careful analyses of correlations are often our only way to quantify cause and effect in domains ranging from healthcare to education. This courses introduces causal inference methods, primarily using probabilistic graphical models, to identify and estimate counterfactual quantities as functions of observational data. We will discuss common challenges to causal inference, including confounding bias, missing data, measurement error, and selection bias. The final project will allow students to choose a dataset on which to perform a causal data analysis.</p>"
66,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-11.html,"<p>In this class we will work together to a) examine how people in the real world communicate about computer science and b) practice how we might communicate computational ideas to various members of the public. The core idea is to explore cultural, practical, and policy-related roles of computer science communication in wider society.</p>"
67,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-12.html,"<p>This course will explore the state of the art in how to implement and prove facts about software. We will focus on small, functional programs and expressing properties of them via an (extremely) sophisticated dependent type system.</p>"
68,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-14.html,"<p>Hands-on introduction to computational methods in empirical linguistic analysis and natural language processing. Topics include language modeling, text classification, linguistic annotation, computational semantics, and machine translation. Students will implement and apply computational models to real linguistic datasets, and conclude the course with a final project. </p>"
69,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-15.html,"<p>The use of social network analysis to understand the growing connectivity and complexity in the world around us on different scales, ranging from small groups to the World ‘Wide Web. How we create social, economic, and technological networks, and how they enable and constrain attitudes and behaviors.</p>"
70,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-16.html,<p><strong>This course is not currently offered.</strong></p>
71,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-17.html,<p>This course introduces students to the advanced techniques commonly used in cyber-attacks and defenses.</p>
72,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-19.html,"<p>This course covers the mathematical operations underlying computer vision and their embodiment in naturally-occurring visual systems. Students will learn basics of image processing, neuroscience, and computational imaging.</p>"
73,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-21.html,"<p>Test-driven development (TDD) is an approach to software development where developers write tests first, then use those tests to drive the design and implementation of their software application. Refactoring, or the process of reworking code to improve readability and performance without changing the underlying function, is strongly intertwined with TDD. In this class we will explore software engineering design patterns, which are typical solutions to common problems in software design, by leveraging TDD and refactoring to identify errors, coding design flaws, and redundancy in code. A rich set of unit tests and consistent refactoring builds quality in to software applications and code by enabling domain and code designs to gradually emerge, and supports evolving business requirements.<br/><br/>In particular, this course will focus on:</p>"
74,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-22.html,"<p>Modern software frameworks such as Next.js, Django, and Spring Boot provide the foundational components to quickly develop and deploy full-stack software applications.  These frameworks, which are reusable abstractions of code wrapped in well-defined Application Programming Interfaces (APIs), provide several benefits for software developers, such as easier development and maintenance, standardization and compatibility, improved security, increased productivity, and easier collaboration. In this course we will explore one of these frameworks to create, iteratively refine, and deploy a real-world application.<br/><br/>In particular, this course will focus on:<br/>• Framework scaffolding structure and components<br/>• HTTP requests, responses, and routing<br/>• CRUD models, ORM, persistence, and database migrations<br/>• Security: authentication and authorization (<em>pending time: social authentication, user persistence</em>)<br/>• Building and consuming a RESTful API<br/>• Error handling<br/>• Deployment to a cloud platform<br/>• Documentation and ADRs<br/>• Version control with GitHub and a JetBrains IDE (specific to language/framework)<br/>• Pending time: Asynchronous tasks, Payment systems</p>"
75,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-24.html,"<p>Cybersecurity can be an intimidating word, but it doesn’t need to be. It is actually fundamental to every application or system we use, however small.</p>"
76,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-2.html,"<p>This is an advanced undergraduate course on algorithms. This course examines such topics as greedy algorithms, dynamic programming, graph algorithms, string processing, and algorithms for computational geometry. We will discuss how to use these techniques for solving real-world problems in C++. Most assignments and examples will be based on competitive programming problems.</p>"
77,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-6.html,"<p>In this seminar, we will survey the fundamentals of data science by reading state of the art research papers in this area. This class will cover the basics of how to manipulate, integrate, and analyze data at scale. To receive credit, students must give in-class presentations and complete a final project.</p>"
78,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-7.html,"<p>This course will be an introduction to the theory of quantum computation from a computer science perspective. Quantum computing holds great promise for obtaining substantial computational improvements over classical computing for many problems.  In this course, we will cover the basics of quantum computation, and different topics that explore both the capabilities and limitations of quantum computers.  Topics will include (subject to change) the basics of quantum information, quantum circuits, quantum algorithms, quantum complexity theory, quantum query complexity, and quantum communication complexity. </p>"
79,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-10.html,<p>This course is a seminar organized around readings and discussions of research papers on Programming Languages (PL). Each incarnation of the course will take a deep dive into a different topic of PL research; contact the instructor for this year's topic.<br/><br/>The course is primarily aimed at PhD students; but undergraduate or MS students who have taken 321 and 396/496: Dynamics of Programming Languages and want to learn more about PL research are also welcome. </p>
80,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-13.html,"<p>Cybersecurity and data privacy are crucial for computer or digital users to keep their data and themselves safe. It is also important to consider security and privacy when designing any technology that users interact with, which can apply to most computing fields. In this course, we will examine the role and effectiveness of cybersecurity and data privacy education across multiple dimensions. For example, we will discuss and synthesize approaches to security and privacy education for everyday users as well as for incorporating security and privacy into the design of technologies across various computing fields.</p>"
81,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-15.html,"<p>The focus of the course is the rigorous analysis of programming languages. Where COMP_SCI 321 looks at languages through the lens of interpreter-based implementation, this course strips the languages down to their essential parts and describes them mathematically. This mathematical description of languages allows us to state and prove properties that validate their design.</p>"
82,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-16.html,"<p>Large-scale computing environments nowadays bring great opportunities in terms of the ubiquity and omnipresence of data, communication, and computation. However, such opportunities often come with concerns on trust and security when exchanging data and computing on joint data. Modern cryptography features precise definitions and rigorous proofs of security for complicated protocols. It is a cornerstone for many large-scale systems used now and crucial for newly emerging systems like e-voting and blockchain. </p>"
83,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-18.html,<p><em> This class is by application only. Direct permission number requests will not be considered.</em></p>
84,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-19.html,"<p>Kolmogorov complexity uses computer science to measure the amount of information (or randomness) contained in finite objects. In addition to being interesting philosophically, Kolmogorov complexity can be fruitfully applied to a variety of topics. This course provides an introduction to this theory, with a minimum of prerequisites. This course will also cover applications of Kolmogorov complexity to various fields, including computational complexity theory, algorithms and combinatorics. </p>"
85,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-21.html,"<p>This course studies approximation algorithms – algorithms that are used for solving hard optimization problems. Such algorithms find approximate (slightly suboptimal) solutions to optimization problems in polynomial time. Unlike heuristics, approximation algorithms have provable performance guarantees: they have bounds on the running time and on the quality of the obtained solutions. In this course, we will introduce various algorithmic techniques used for solving optimization problems such as greedy algorithms, local search, dynamic programming, linear programming (LP), semidefinite programming (SDP), LP duality, randomized rounding, and primal-dual analysis.</p>"
86,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-24.html,"<p><span>CS Education Research in the Community is an opportunity for students to learn about many of the practical aspects of teaching youth computer programming. Students will spend the quarter reading papers about expansive computer science education initiatives. These papers will introduce students to a collection of engaging CS-related projects and curricular materials, as well as facilitation best practices. Throughout the quarter, students will also teach 1-2 computer science lessons within elementary school coding classes every week in partnership with a teacher. In conjunction with teaching youth coding classes, students will begin to practice data collection commonly used within computer science education research. Students will take field notes, produce jottings, and administer surveys to better understand how youth are experiencing the coding curricula. During weekly class sessions, students will discuss the previous week’s visit to the local community school. At the conclusion of the course, students will submit a short paper describing ways that they modified the curriculum and particular facilitation strategies that worked well for their specific context.</span></p>"
87,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-25.html,"<p>Computing technologies shape our personal, social, and political lives in increasingly complex and consequential ways – providing tremendous benefits (e.g. convenient access to information, connecting to one another across time and space) and harms (e.g. biased decision-making, mass surveillance, disinformation campaigns, and exclusion from critical material opportunities) that are important to examine and understand.<br/><br/>At the same time, these technologies are born and shaped by the societies in which they are developed. Thus, grappling with the ethics of technologies (i.e considering the harms and benefits, how and why they were created in the first place, and how and to what ends they are used) is important not only for ultimately creating more moral technologies but a more moral society. Thus, our approach to the ethics of computing technologies requires a multifaceted assessment of their harm and benefit to our individual, cultural, and political lives, and simultaneously a critical examination of the values, ideologies, and contexts through which computing technologies emerge.<br/><br/>To accomplish this, we will engage in critical reading across a range of topics drawn from computer science and HCI, education and learning sciences, as well as ethics and philosophy. These readings and ideas will help us to:</p>"
88,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-26.html,"<p><strong>PREREQUISITES:</strong> Interested students need to apply via the following Google Form: <a href=""https://forms.gle/g4TRSMdEZeAKWyFm7"">https://forms.gle/g4TRSMdEZeAKWyFm7</a><br/><br/>Completion of one or more of these courses or graduate enrollment is recommended: </p>"
89,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/396-496-27.html,"<p>Health technologies are now being used by providers to improve care and by people as they manage their health in everyday life. This course will survey research at the intersection of HCI, CSCW, and mental health. We will review research methods being used to understand healthcare processes, collect health data, and design digital health interventions. <br/><br/>This seminar is intended for doctoral students with ongoing projects related to HCI and health. Through this seminar course, students will get exposure to the theories and sociotechnical principles that help in creating effective interventions, and methods for evaluating their success.</p>"
90,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-1.html,"<p>Statistical language models assign probabilities to sequences of words, and are used in systems that perform text summarization, machine translation, question answering, information extraction, text generation (dialogue system) and many other tasks. In recent years, language models based on deep neural networks have dramatically improved the state of the art. This course will cover the fundamental technologies comprising statistical language models, such as word embedding methods, recurrent neural networks and transformers, and selected natural language processing tasks by reading canonical research papers that helped define the field. Students will be required to read and present research papers and to complete a substantial research project. This is a research-focused class, with several groups submitting papers to major conferences in the past.</p>"
91,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-2.html,"<p>In this course we will examine the role of computational tools in the design of transformative teaching and learning environments. Grounded in perspectives from the Learning Sciences and Computer Science Education, we will cover topics of equity and inclusion, pedagogy, creative applications of computing, and the integration of computational ideas across multiple disciplines. We have cross-listed the course in Computer Science, Learning Sciences, and Teacher Education in order to foster cross-disciplinary dialogues that consider the affordances of computational ideas for designing learning environments that are asset-based and supportive of multiple routes to understanding various subject-matter. The course will include an optional practicum experience working in a K-12 classroom, informal learning space, or college-level classroom.</p>"
92,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-3.html,<p><strong><em>Under Construction - Coming Soon</em></strong></p>
93,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-10.html,"<p>This class is intended for students who have completed a previous class involving multimodal analytics or multimodal interfaces, and who wish to build their final projects into publishable research. Accordingly, students are expected to do one of the following:</p>"
94,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-12.html,"<p>The course will cover a broad range of topics including congestion control, routing, analysis and design of network protocols (both wired and wireless), data centers, analysis and performance of content distribution networks, network security, vulnerability, and defenses, net neutrality, and online social networks.</p>"
95,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-14.html,"<p>Wireless and Mobile health (mHealth) aims to improve our health and well-being by utilizing data provided by technologies such as wearables, IoT devices, and mobile phones. This course will cover foundational knowledge and topical work in mHealth. Students will learn the essential steps needed to create a mHealth system from conception to evaluation through assigned reading, group discussions, and some hands-on projects. Since mHeath is an interdisciplinary field, we will cover a range of literature in human-computer interaction, wearable systems, machine learning, and health. Readings, hands-on projects, and in-class activities will prepare students for their final creative assignment that involves writing and presenting a research proposal for a mHealth system or research idea. Although this course will cover some technical aspects of mHealth, we encourage students with different backgrounds to enroll as they will work in interdisciplinary teams.</p>"
96,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-15.html,"<p>The Innovation Lab is an interdisciplinary course designed to immerse students in the innovation process. This course focuses on the legal, business, technical, teamwork, design, presentation, and other skills involved in that process. Students will work as part of a multidisciplinary team to explore a problem relating to the legal profession, understand the stakeholders' needs, brainstorm, prototype, and test ideas, and iterate through the develop.</p>"
97,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-2.html,"<p>Production compilers often do not include the latest compilation techniques proposed by the research community. This is because the latest techniques are often not yet as robust as they need to be to be included in a production compiler. My other compiler classes (<a href=""https://users.cs.northwestern.edu/~simonec/CC.html"" rel=""noopener"" target=""_blank"">COMP_SCI 322</a> and <a href=""https://users.cs.northwestern.edu/~simonec/CAT.html"" rel=""noopener"" target=""_blank"">COMP_SCI 323</a>) teach well-established compilation techniques included in production compilers (e.g., register allocation, instruction selection). This class, instead, focuses on the advanced compilation techniques the research community has proposed that are not yet included in production compilers. This class covers the large number of compilation techniques proposed by the research community across several years. Specifically, we organize these compilation techniques in topics. Every year we will focus only on up to two topics (e.g., automatic parallelizing compilers, autotuning) to allow a deep dive study.  <a href=""https://users.cs.northwestern.edu/~simonec/ATC.html"">Syllabus</a></p>"
98,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-20.html,"<p>The Internet of Things promises a world of computers woven into our physical world. A common need for these devices is low-power, wireless communication. The goal of this course is to introduce students to a variety of wireless networks that target low-power, machine-to-machine communication as is common in the Internet of Things. While we introduce the physical layer and have a goal of getting data to the internet at large, the focus of this course is on the wireless protocols themselves. How are packets structured, and why? How are they designed to enable low-power communication? How do they deal with contention and reliability? What makes them more or less suitable for different applications? We will explore local-area protocols such as Bluetooth Low Energy, Thread (and other 802.15.4 protocols), low-power, wide-area networks (LPWANs) such as LoRaWAN and Sigfox, and other related topics such as backscatter and localization.<br/> <br/> The class will include lectures on these topics as well as practical hands-on lab sessions interacting with networks. Starting very early in the class, students will form groups for their final project and create a proposal, allowing them at least 5 weeks for project work. Projects will culminate in a research-paper-style writeup and a class presentation.<br/><em></em></p>"
99,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-3.html,"<p>Sports, Technology and Learning will examine the apparent alignment and discrepencies among these three areas. Students will read conference and journal papers, watch sports-related movies, critique existing sports-related technologies and prototype their own technologies. The course also plans to include guest speakers from other universities, industry and sports teams and more.</p>"
100,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/397-497-4.html,"<p>This is a joint projects class with Medill in conjunction with the <strong><a href=""https://knightlab.northwestern.edu/"">Knight News Innovation Lab</a></strong> at Northwestern. McCormick students (primarily CS and CE majors) and journalism students will join cross-functional teams to assess and develop, from both an audience/market perspective and a technology perspective, a range of technology projects with the ultimate goal of deployment for impact in media and journalism.  Some projects may continue over the summer if students are interested.</p>"
101,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/401.html,"<p>The course is an introduction to graduate studies in Computer Science at Northwestern organized for the incoming Ph.D. students. The class, held during the Fall quarter, meets twice a week for 50’ with the goal of preparing you to perform great research, regardless of area, and providing an overview of research areas in CS@NU through short presentations by CS faculty. It also offers an opportunity for CS students and faculty to get to know each other and learn the science, culture, values, and people that make CS@NU unique (<em>Formerly Comp_Sci 496 and last offer was Fall 2021</em>).<br/><em></em></p>"
102,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/409.html,"<p>Advances in technology have begun to allow for the production of large groups, or swarms, of robots; however, there exists a large gap between their current capabilities and those of swarms found in nature or envisioned for future robot swarms.  These deficiencies are the result of two factors, difficulties in algorithmic control of these swarms, and limitations in hardware capabilities of the individuals.  This class surveys the state of the art research that addresses these deficiencies.  Coursework includes reading research papers, student presentations and discussion of select papers, and a final project implementing studied topics in a real or simulated robot swarm.   </p>"
103,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/410.html,"<p>Centered around a project where teams (1 to 2 students per team) create and program a visually-guided autonomous quadrotor robot, this class focuses on advanced embedded control of an electromechanical system.  Topics include mechanical/electrical assembly, programming interfaces between an embedded computer (such as a Raspberry PI running Linux) and external sensors/actuators (such as an IMU, camera, or motor controllers), programming and tuning a timing-critical control loop for stable flight, using pre-existing computer vision software for tracking optical targets, and creating a software stack that interacts with low-level code to create a desired high level behavior.</p>"
104,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/440.html,"<p>The Internet has evolved from a small, well controlled, and trusted network, into a gigantic, loosely controlled, and highly uncooperative infrastructure of astonishing scale and complexity. Not only that different hosts or networks have divergent functional or economical interests, but the Internet has become a “playground” for malicious denial-of-service attackers of all kinds. Moreover, its everyday operation is often poorly understood, and existing solutions to many of the classical challenges remain unsatisfactory. Hence, the design of Internet is far from complete, and it is certain that it will continue to change. This class is intended to help you understand how and why, by letting the Internet to become your “playground” for a quarter.</p>"
105,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/445.html,<p>Internet-scale Experimentation is a graduate-level seminar exploring the challenges of large-scale networked system experimentation and measurements.</p>
106,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/446.html,"<p>The development of low-level software such as drivers, kernels, hypervisors, run-times, system libraries, JITs, and firmware is very different from the development of applications. The goal of this class is to teach students how such development is done, both in terms of the modes of thinking needed to design, implement, debug, and optimize low-level software, and in terms of how to leverage representative, widely-used tools to do so. Some of the techniques the class covers are also used in the design and optimization of the performance-critical parts of applications. </p>"
107,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/449.html,"<p>Deep learning is a branch of machine learning based on algorithms that try to model high-level abstract representations of data by using multiple processing layers with complex structures. Some representations make it easier to learn tasks (e.g., face recognition or spoken word recognition) from examples. One of the promises of deep learning is replacing handcrafted features with efficient algorithms for unsupervised or semi-supervised feature learning and hierarchical feature extraction.</p>"
108,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/450.html,"<p>Cybercrime has exploded over the past several decades. In this instructor-led course, we will start with the basic concepts of network security, then focus on the emerging security challenges of network and distributed systems as well as the counter-attack approaches.</p>"
109,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/452.html,"<p><strong>CATALOG DESCRIPTION: </strong>Design and evaluation of modern uniprocessor computing systems. Evaluation methodology/metrics and caveats, instruction set design, advanced pipelining, instruction level parallelism, prediction-based techniques, alternative architectures (VLIW, Vector and SIMD), memory hierarchy design, I/O, and recent trends in architecture (e.g., low-power architectures, application-specific processors). Case studies.</p>"
110,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/453.html,"<p><strong>CATALOG DESCRIPTION: </strong>Parallel computer architecture and programming models. Message passing and shared memory multiprocessors. Scalability, synchronization, memory consistency, cache coherence. Memory hierarchy design. Network design.</p>"
111,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/456.html,"<p>This course examines fundamental issues and design trade-offs in modern processor architectures. We will discuss some of the constraints that limit the design and programmability of modern processors, and promising techniques to mitigate these constraints. As such, we will draw material from seminal and recent publications in top computer architecture conferences and journals. By exposing the students to state-of-the-art research, the course serves as an entry point to further research in computer architecture. The course will cover a sample of research across a wide spectrum of topics from emerging architectures, including quantum computing, neuromorphic computing, space-time computing, silicon photonics in computer architectures, and advanced techniques in more traditional topics, including memory systems and advanced cache designs, memory consistency models and operational semantics, programmability (e.g., transactional memory, deterministic programming, speculative multithreading), on-chip interconnects, power/thermal management, reliability, and fault tolerance. The exact collection of topics varies across offerings, as the field itself evolves rapidly. The course has a seminar format, and the students are expected to lead multiple presentations throughout the quarter. The course requires the completion of a project in computer architecture. The project component of the course is open-ended, and students are encouraged to draw on their own research interests and prior background for inspiration.</p>"
112,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/459.html,"<p>Introduction to advanced topics in synthesis and modeling of complex VLSI systems at behavioral and logic level. Topics include resource allocation, resource binding, scheduling, and controller design in high level synthesis, C to hardware compilation flows, logic synthesis, survey of stat-of-the-art in high level and system level design methods and tools.</p>"
113,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/469.html,"<p>A coverage of artificial intelligence, machine learning and statistical estimation topics that are especially relevant for robot operation and robotics research. The focus is on robotics-relevant aspects of ML and AI that are not covered in depth in <strong><a href=""348.html"" target=""_self"">COMP_SCI 348</a></strong> or <strong><a href=""349.html"" target=""_self"">COMP_SCI 349</a></strong>. Course evaluation will be largely project-based.<br/><em><br/><strong>Cross-listed with MECH_ENG 469</strong></em></p>"
114,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/474.html,"<p>Probabilistic graphical models are a powerful technique for handling uncertainty in machine learning. The course will cover how probability distributions can be represented in graphical models, how inference and learning are performed in the models, and how the models are utilized for machine learning in practice.</p>"
115,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-7.html,"<p>This course is a hands-on practicum in designing and building technology-enabled curricula and learning environments. We will use many rich software toolkits designed to enable novice computer users to get their “hands dirty” doing iterative software design. In addition to the hands-on component, the course is also designed to introduce you to the Constructionist Learning design perspective - first named by Seymour Papert and greatly influenced by the work of Jean Piaget - a perspective that is very influential in the Learning Sciences today. <strong><a href=""http://ccl.northwestern.edu/dtttl/2016LS426/Info.html"" rel=""noopener"" target=""_blank"">Course Website</a></strong> &amp; <strong><a href=""https://canvas.northwestern.edu/courses/33060%20"" rel=""noopener"" target=""_blank"">Canvas Website</a></strong></p>"
116,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-8.html,"<p>Study of advanced topics of current interest in the field of deep learning, with an emphasis on understanding the network architecture of the pre-trained deep learning models. Selected topics from the following areas will be covered, with an emphasis on practical applications: computer vision, speech recognition, natural language processing, reinforcement learning, and deep learning tools.</p>"
117,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-15.html,"<p>This is a seminar course that will explore the design and implementation of key-value storage engines, which have become ubiquitous in a wide variety of modern data management applications. It is intended for graduate and advanced undergraduate students interested in systems research. Students will learn how to: (1) read and critically evaluate systems research papers; (2) craft presentations that distill and convey core research ideas; and (3) plan and execute a final project that answers an interesting systems research question.  <strong><a href=""https://github.com/crottyan/cs496-f22"">CS 496 section 15 Syllabus</a></strong></p>"
118,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-20.html,"<p>Modern cryptographic protocols provide users with full control of their data without any privacy scarification. However, such power comes with a massive slowdown; many protocols are often thousands or millions of times slower than cleartext computation. To obtain the best performance possible, recent systems have spent many efforts to accelerate cryptographic protocols as a co-design of theory and system. This course will study some recent success in such co-design.</p>"
119,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-21.html,"<p>How people reason and learn about the continuous world is one of the central problems in cognitive<br/>science. It is key to understanding how commonsense reasoning works about the physical and social<br/>world. This seminar will explore ideas from qualitative reasoning, which provides representations that<br/>support human-like reasoning and learning.<br/><span></span></p>"
120,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-23.html,"<p><strong>Prerequisites:</strong> This class is <a href=""https://forms.office.com/r/tPTnSXXLQa"">by application only</a>, as instructor permission is required---possibly based on a brief meeting---in addition to (CS 349 AND (CS 348 or CS 371)). Equivalent courses elsewhere may be considered if course descriptions are provided and approved, though students who have taken the prerequisites at Northwestern will be given priority.</p>"
121,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-24.html,"<p>This course focuses on developing visualizations for communicating in a scientific context: papers, posters, presentations, etc. Through mini-lectures and readings, it will provide a foundation in: (1) visual perception and visual design as they relate to information visualization; (2) the construction of effective data visualizations; (3) the effective use of visualization and text in scientific articles, posters, etc; and (4) careful and correct uncertainty visualization when communicating scientific results. Students are expected to bring some existing research project they are already working on; in a semester-long project they will design/redesign the visual communication of that work with detailed feedback from the instructor. No other background is assumed.<span></span></p>"
122,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-25.html,"<p>Deep learning is a branch of machine learning based on algorithms that try to model high-level abstract representations of data by using multiple processing layers with complex structures. One of the most exciting areas of research in deep learning is that of generative models. Today’s generative models create text documents, write songs, make paintings and videos, and generate speech. This course is dedicated to understanding the inner workings of the technologies that underlie these advances. Students will learn about key methodologies, including Variational Autoencoders (VAEs), Generative Adversarial Networks (GANs), and Transformer-based language models.  This is an advanced course that presumes a good working understanding of traditional supervised neural network technology and techniques (e.g. convolutional networks, LSTMs, loss functions, regularization, gradient descent).</p>"
123,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-26.html,"<p>Today’s data pose unprecedented challenges for machine learning,  statistics and data analysis. It may be incomplete, noisy, or exposed to some unknown source of corruption. Moreover, recent phenomenon of (imperceptible) adversarial perturbations have also demonstrated that robustness is important for reliable and secure adoption of ML systems in practice. </p>"
124,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-29.html,<p><strong><em>Under Construction - Coming Soon</em></strong></p>
125,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-30.html,"<p>The goal of this topics course is to study the foundations of different types of logics used commonly in artificial intelligence. Logic forms the basis for many types of reasoning used by humans – researchers in AI have extended classical logic over the years to numerous more “exotic” logics. This course will cover the theoretical foundations of a host of classical and non-classical logics, a number of interesting logics developed by AI researchers for common-sense reasoning, and applications of those logics. You will also learn how to design our own custom logic(s)!</p>"
126,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-31.html,<p><strong>*</strong><strong><em>This course fulfills the Technical Elective area.</em></strong></p>
127,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-32.html,"<p>This is a graduate-level course focused on techniques and models in modern discrete probability. Topics include: the first and second moment methods, martingales, concentration inequalities, branching processes, percolation, and Markov chains. Examples will be drawn from random structure and algorithm applications. The goal of the course is to equip students to carry out their own research using the toolkit of discrete probability.</p>"
128,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-33.html,"<p>Tensors, or multiindexed arrays, generalize matrices (two dimensional) to three dimensions and beyond. Due to the great ability of tensors to model higher-order data and nonlinear functions, tensor techniques have seen great success in a variety of applications including machine learning, computer vision, and signal processing. In addition, tensors have a rich underlying mathematical structure.</p>"
129,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-35.html,<p><strong><em>*Please note this will be a 0 credit 3-week course during the weeks of May 1-17. This course does not fulfill the Technical Elective area.</em></strong></p>
130,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-36.html,"<p>This is a graduate topics course on learning in networks, focusing in particular on fundamental statistical and computational limits. Topics include the planted clique problem, community detection, high-dimensional random geometric graphs, root-finding algorithms, graph matching, information-computation gaps, and more. While exploring these topics, we will discuss several general techniques that are applicable more broadly, such as the first and second moment methods, concentration inequalities, martingales, branching processes, information-theoretic methods, spectral algorithms, and more.</p>"
131,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-37.html,"<p>This seminar is intended to review theoretical, conceptual, and analytic issues associated with network perspectives on communicating and organizing.</p>"
132,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-38.html,<p>This class will meet for 3 hours per week and an additional (and optional) tutorial/review sessions may be scheduled as needed.</p>
133,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/496-39.html,<p>This course will provide students with the knowledge and skills they need to successfully search for academic and research focused jobs. Topics covered will include:</p>
134,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-9.html,"<p>This course will provide a comprehensive overview of the internals of modern database management systems (DBMSs), specifically focusing on the core concepts behind online analytical query processing (OLAP). It is intended for graduate and advanced undergraduate students interested in systems research. Students will learn how to: (1) read and evaluate systems research papers, with emphasis on constructive criticism; (2) identify tradeoffs and justify design decisions related to the architecture of an OLAP DBMS; (3) craft and deliver presentations that distill core research ideas; and (4) plan and execute a final project that answers an interesting systems research question.<br/> <br/>Pre-Requisites: CS PhD students or permission of instructor. The student is expected to have taken an introductory database systems course like CS339 or equivalent.</p>"
135,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-10.html,"<p>In applications like routing, job scheduling, caching, etc., requests arrive sequentially, and the goal of the system is to handle requests as they arrive, while optimizing an appropriate overall objective. The field of online algorithms focuses on developing and analyzing such systems, and ensuring that they are ""competitive"" against the best solution in hindsight. While online algorithms have been developed for a wide variety of problems, the standard worst-case guarantees turn out to be insufficient in many applications. The question then is if we can use the ""structure"" in real world data to obtain better guarantees. Since structure is a problem-dependent notion, one general way to model it is to assume that there is a predictive model (possibly based on machine learning on past data) that can provide partial information about the problem instance, e.g., about upcoming requests. In this PhD-level course, we will see how to design algorithms that can exploit such ""advice"". We will consider a variety of online problems ranging from data structures and caching to online learning and bandits.<br/>[The course will assume familiarity with the design and analysis of algorithms, probabilistic analysis, as well as notions such as approximation factors.]</p>"
136,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-11.html,"<p>In this seminar course, we will consider what it means to produce reproducible explanations in data-driven science. As the complexity and size of available data increases, intuitive explanations of what has been learned from data are in high demand. However, what does it mean for an explanation to be accurate and reproducible, and how do threats to validity of data-driven inferences differ depending on the underlying goal of statistical modeling? The readings of the course will be drawn from recent and classic literature pertaining to reproducibility, replication, and explanation in data inference published in computer science, statistics, and related fields. The course is structured in three parts. In part one we will examine recent evidence of problems of reproducibility, replicability and robustness in data-driven science. In part two we will examine theories and evidence related to causes of these problems. In part three, we will consider solutions and open questions.  Topics include: ML reproducibility, the social science replication crisis, adaptive data analysis, causal inference, generalizability, and uncertainty communication.</p>"
137,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-12.html,"<p>This graduate-level seminar class will cover great papers in theoretical computer science from the past two decades. In every class, a student will present one of the papers, chosen from a curated list of papers across different areas of TCS. The goal is to show complete proof details for the main results in the paper, to the extent that this is possible within 2 hours. In addition to learning about these results and the mathematical techniques they introduce, a goal of this course is to stimulate further research on open problems related to the paper.<br/> <br/>Pre-Requisites: CS PhD students or permission of instructor. The student is expected to have already taken a graduate course in theory, like Graduate Algorithms or equivalent.</p>"
138,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-3.html,"<p>Digital Musical Instrument Design approaches Human Computer Interaction through the lens of artistic creation in sound. Its perspective sits at the intersection of design, engineering, musicianship, and the sonic arts. This course will introduce students to fundamentals of creating their own musical instruments using highly-accessible modern technologies in hardware and software. We will explore the influence and feedback between the tool (e.g. an instrument), the tool user (a musician/producer), the creative output (the music), as well as the audience. Along the way, we will learn about user interaction design, physical computing (using arduino), sensor technology, signal creation and interpretation (using Max or PureData), and musical expression. Students will create a new musical instrument by the end of the course and the final project will involve a performance using their instrument.</p>"
139,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-4.html,"<p>This seminar class will focus on reading research papers about the design of tools and technologies for computer science education and conducting individual research projects in this area. The course will cover computer science education across a variety of contexts, including formal and informal learning spaces at the K-12 level, university level, and adult/professional level. We'll read papers about the design of different tools and technologies to facilitate learning computational ideas, including IDE design, physical programming and making, crowdsourcing systems, and learning analytics. There will be a final project component, ideally related to each students' own personal research interests, that will touch on the topics covered in class. By the end of the quarter, students will have a broad understanding of current research in computer science education and how tools and technologies can be designed to support and foster learning in this domain. Students will also have a chance to practice reading and reflecting on research papers, presenting and leading discussions, and conducting their own independent research in this space.</p>"
140,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-6.html,"<p>In the first half of this course, we will explore the evolution of deep neural network language models, starting with n-gram models and proceeding through feed-forward neural networks, recurrent neural networks and transformer-based models.  In the second half of the course we will apply these models to natural language processing tasks, including question answering, text classification (including fakes detection), text summarization, text generation (including dialogue, neural machine translation and program synthesis) and natural language inference, among others.  After completing this course, students will be able to generalize these techniques to a wide variety of applied and research problems in natural language processing.</p>"
141,https://www.mccormick.northwestern.edu/computer-science/academics/courses/descriptions/497-8.html,"<p>This is an advanced topics seminar that will consider theoretical topics in the space of <em>data economics</em>. As data science transforms science and society, it is important to develop the economics of data. Collecting data is costly, possessing data gives market power, sharing data has risks and benefits, conclusions from data depend on data quantity and quality. The readings of the course will be drawn from the recent and classic literature pertaining to data economics. Topics include: valuing data, eliciting data, incentivizing data collection and sharing, adaptive data analysis, and game theory with data.</p>"
